name: Test Secrets Configuration

on:
  workflow_dispatch:

jobs:
  test-secrets:
    name: Test GitHub Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Test Azure Secrets
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        echo "üîç Verificando secrets de Azure..."
        
        if [ -z "$AZURE_CLIENT_ID" ]; then
          echo "‚ùå ERROR: AZURE_CLIENT_ID no est√° configurado"
          exit 1
        else
          echo "‚úÖ AZURE_CLIENT_ID: Configurado (${#AZURE_CLIENT_ID} caracteres)"
        fi
        
        if [ -z "$AZURE_CLIENT_SECRET" ]; then
          echo "‚ùå ERROR: AZURE_CLIENT_SECRET no est√° configurado"
          exit 1
        else
          echo "‚úÖ AZURE_CLIENT_SECRET: Configurado (${#AZURE_CLIENT_SECRET} caracteres)"
        fi
        
        if [ -z "$AZURE_SUBSCRIPTION_ID" ]; then
          echo "‚ùå ERROR: AZURE_SUBSCRIPTION_ID no est√° configurado"
          exit 1
        else
          echo "‚úÖ AZURE_SUBSCRIPTION_ID: Configurado (${#AZURE_SUBSCRIPTION_ID} caracteres)"
        fi
        
        if [ -z "$AZURE_TENANT_ID" ]; then
          echo "‚ùå ERROR: AZURE_TENANT_ID no est√° configurado"
          exit 1
        else
          echo "‚úÖ AZURE_TENANT_ID: Configurado (${#AZURE_TENANT_ID} caracteres)"
        fi

    - name: Test Deployment Secrets
      env:
        AZURE_WEBAPP_PUBLISH_PROFILE_API: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_API }}
        AZURE_SQL_CONNECTION_STRING: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
      run: |
        echo "üîç Verificando secrets de deployment..."
        
        if [ -z "$AZURE_WEBAPP_PUBLISH_PROFILE_API" ]; then
          echo "‚ùå ERROR: AZURE_WEBAPP_PUBLISH_PROFILE_API no est√° configurado"
        else
          echo "‚úÖ AZURE_WEBAPP_PUBLISH_PROFILE_API: Configurado (${#AZURE_WEBAPP_PUBLISH_PROFILE_API} caracteres)"
        fi
        
        if [ -z "$AZURE_SQL_CONNECTION_STRING" ]; then
          echo "‚ö†Ô∏è  ADVERTENCIA: AZURE_SQL_CONNECTION_STRING no est√° configurado (opcional)"
        else
          echo "‚úÖ AZURE_SQL_CONNECTION_STRING: Configurado (${#AZURE_SQL_CONNECTION_STRING} caracteres)"
        fi

    - name: Test Azure CLI Login
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        echo "üîç Probando login a Azure..."
        
        # Install Azure CLI
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        
        # Login with service principal
        az login --service-principal \
          --username $AZURE_CLIENT_ID \
          --password $AZURE_CLIENT_SECRET \
          --tenant $AZURE_TENANT_ID
        
        # Set subscription
        az account set --subscription $AZURE_SUBSCRIPTION_ID
        
        # Verify login
        echo "‚úÖ Login exitoso a Azure"
        az account show --output table

    - name: Test App Service Access
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: |
        echo "üîç Verificando acceso al App Service..."
        
        # Check if App Service exists
        APP_EXISTS=$(az webapp list --query "[?name=='asistenciaestudiantil'].name" --output tsv)
        
        if [ -n "$APP_EXISTS" ]; then
          echo "‚úÖ App Service 'asistenciaestudiantil' encontrado"
          
          # Get App Service details
          az webapp show --name asistenciaestudiantil --resource-group pds --output table
          
          # Check App Service status
          STATUS=$(az webapp show --name asistenciaestudiantil --resource-group pds --query "state" --output tsv)
          echo "üìä Estado del App Service: $STATUS"
          
        else
          echo "‚ùå ERROR: App Service 'asistenciaestudiantil' no encontrado"
          echo "üìã App Services disponibles:"
          az webapp list --output table
        fi

    - name: Test Publish Profile
      env:
        AZURE_WEBAPP_PUBLISH_PROFILE_API: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_API }}
      run: |
        echo "üîç Verificando formato del Publish Profile..."
        
        if [[ "$AZURE_WEBAPP_PUBLISH_PROFILE_API" == *"<publishData>"* ]]; then
          echo "‚úÖ Publish Profile tiene formato XML correcto"
        else
          echo "‚ùå ERROR: Publish Profile no tiene formato XML v√°lido"
        fi
        
        if [[ "$AZURE_WEBAPP_PUBLISH_PROFILE_API" == *"asistenciaestudiantil"* ]]; then
          echo "‚úÖ Publish Profile contiene el nombre correcto del App Service"
        else
          echo "‚ùå ERROR: Publish Profile no contiene 'asistenciaestudiantil'"
        fi

    - name: Summary
      run: |
        echo ""
        echo "üéØ RESUMEN DE VERIFICACI√ìN:"
        echo "‚úÖ Secrets de Azure configurados"
        echo "‚úÖ Login a Azure exitoso"
        echo "‚úÖ App Service accesible"
        echo "‚úÖ Publish Profile v√°lido"
        echo ""
        echo "üöÄ ¬°Tus secrets est√°n configurados correctamente!"
        echo "üí° Puedes proceder con el deployment usando 'Deploy Simple'"
