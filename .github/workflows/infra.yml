name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths: [ 'infrastructure/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'infrastructure/**' ]
  workflow_dispatch:

env:
  TF_VERSION: 1.6.0
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./infrastructure

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: ./infrastructure

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infrastructure

    - name: Update Summary
      run: |
        echo "## 🔍 Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Terraform Format**: Valid" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Terraform Init**: Successful" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Terraform Validate**: Passed" >> $GITHUB_STEP_SUMMARY

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=tfplan
      working-directory: ./infrastructure

    - name: Comment PR with Plan
      uses: actions/github-script@v6
      with:
        script: |
          const output = `## 📋 Terraform Plan Results
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Upload Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ github.event.number }}
        path: ./infrastructure/tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./infrastructure

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./infrastructure

    - name: Get Terraform Outputs
      id: terraform-outputs
      run: |
        echo "api_url=$(terraform output -raw api_url 2>/dev/null || echo 'https://attendance-system-api.azurewebsites.net')" >> $GITHUB_OUTPUT
        echo "frontend_url=$(terraform output -raw frontend_url 2>/dev/null || echo 'https://attendance-system-frontend.azurestaticapps.net')" >> $GITHUB_OUTPUT
        echo "static_web_app_api_key=$(terraform output -raw static_web_app_api_key 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
        echo "resource_group=$(terraform output -raw resource_group_name 2>/dev/null || echo 'attendance-system-rg')" >> $GITHUB_OUTPUT
        echo "sql_server=$(terraform output -raw sql_server_name 2>/dev/null || echo 'attendance-system-sqlserver')" >> $GITHUB_OUTPUT
        echo "sql_database=$(terraform output -raw sql_database_name 2>/dev/null || echo 'attendance-system-db')" >> $GITHUB_OUTPUT
      working-directory: ./infrastructure

    - name: Update Repository Secrets (if token available)
      if: ${{ secrets.PERSONAL_ACCESS_TOKEN && steps.terraform-outputs.outputs.static_web_app_api_key }}
      uses: gliech/create-github-secret-action@v1
      with:
        name: AZURE_STATIC_WEB_APPS_API_TOKEN
        value: ${{ steps.terraform-outputs.outputs.static_web_app_api_key }}
        pa_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    - name: Create Infrastructure Summary
      run: |
        echo "## 🚀 Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 **Deployed Resources**" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: ${{ steps.terraform-outputs.outputs.resource_group }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API URL**: ${{ steps.terraform-outputs.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL**: ${{ steps.terraform-outputs.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SQL Server**: ${{ steps.terraform-outputs.outputs.sql_server }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SQL Database**: ${{ steps.terraform-outputs.outputs.sql_database }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 **Access Points**" >> $GITHUB_STEP_SUMMARY
        echo "- **API Swagger**: ${{ steps.terraform-outputs.outputs.api_url }}/swagger" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend App**: ${{ steps.terraform-outputs.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚙️ **Next Steps**" >> $GITHUB_STEP_SUMMARY
        echo "1. Configure application settings" >> $GITHUB_STEP_SUMMARY
        echo "2. Deploy backend application" >> $GITHUB_STEP_SUMMARY
        echo "3. Deploy frontend application" >> $GITHUB_STEP_SUMMARY
        echo "4. Test the complete system" >> $GITHUB_STEP_SUMMARY

    - name: Upload Infrastructure State
      uses: actions/upload-artifact@v3
      with:
        name: terraform-state-${{ github.sha }}
        path: ./infrastructure/.terraform/
        retention-days: 30

  infrastructure-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/destroy' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./infrastructure

    - name: Update Summary
      run: |
        echo "## 🗑️ Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ All infrastructure resources have been destroyed." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Resources Removed:**" >> $GITHUB_STEP_SUMMARY
        echo "- Resource Group" >> $GITHUB_STEP_SUMMARY
        echo "- App Service Plan and Web App" >> $GITHUB_STEP_SUMMARY
        echo "- Static Web App" >> $GITHUB_STEP_SUMMARY
        echo "- SQL Server and Database" >> $GITHUB_STEP_SUMMARY
        echo "- Application Insights" >> $GITHUB_STEP_SUMMARY
        echo "- Log Analytics Workspace" >> $GITHUB_STEP_SUMMARY
