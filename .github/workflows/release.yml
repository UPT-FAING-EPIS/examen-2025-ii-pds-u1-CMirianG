name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Restore backend dependencies
      run: |
        cd backend/AttendanceSystem.API
        dotnet restore

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build backend
      run: |
        cd backend/AttendanceSystem.API
        dotnet build --configuration Release --no-restore

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Run backend tests
      run: |
        cd backend
        if [ -d "AttendanceSystem.Tests" ]; then
          dotnet test --configuration Release --no-build --verbosity normal
        else
          echo "No tests found, skipping test execution"
        fi

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test -- --coverage --watchAll=false || echo "No frontend tests configured"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-build-${{ github.ref_name }}
        path: |
          backend/AttendanceSystem.API/bin/
          frontend/dist/
          backend/AttendanceSystem.API/publish/

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
        echo "release_name=Attendance System $VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Generating changelog from $PREVIOUS_TAG to ${{ steps.get_version.outputs.version }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          echo "First release, generating full changelog"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Create changelog file
        cat > CHANGELOG.md << EOF
        # Changelog
        
        ## ${{ steps.get_version.outputs.version }} ($(date +%Y-%m-%d))
        
        ### Changes
        $CHANGELOG
        
        ### Features
        - Student attendance management
        - Course and session management
        - Real-time reporting dashboard
        - RESTful API with Swagger documentation
        - Responsive web interface
        
        ### Technical Details
        - Backend: .NET 8 with ASP.NET Core
        - Frontend: React 18 with TypeScript
        - Database: Azure SQL Database
        - Infrastructure: Azure App Service with Terraform
        
        ### Installation
        1. Deploy infrastructure using Terraform
        2. Configure connection strings
        3. Deploy backend to Azure App Service
        4. Deploy frontend to Azure Static Web Apps
        
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.tag_name }}
        release_name: ${{ steps.get_version.outputs.release_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' || contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-build-${{ steps.get_version.outputs.version }}
        path: ./artifacts

    - name: Create deployment packages
      run: |
        mkdir -p ./release-packages
        
        # Create backend package
        cd artifacts
        tar -czf ../release-packages/attendance-system-backend-${{ steps.get_version.outputs.version }}.tar.gz -C backend/AttendanceSystem.API .
        cd ..
        
        # Create frontend package
        tar -czf ./release-packages/attendance-system-frontend-${{ steps.get_version.outputs.version }}.tar.gz -C artifacts/frontend/dist .
        
        # Create complete system package
        tar -czf ./release-packages/attendance-system-complete-${{ steps.get_version.outputs.version }}.tar.gz \
          -C artifacts backend/ \
          -C artifacts frontend/dist/
        
        # Create infrastructure package
        tar -czf ./release-packages/attendance-system-infrastructure-${{ steps.get_version.outputs.version }}.tar.gz \
          infrastructure/ \
          *.md \
          .github/workflows/
        
        # Create source code package
        tar -czf ./release-packages/attendance-system-source-${{ steps.get_version.outputs.version }}.tar.gz \
          --exclude='node_modules' \
          --exclude='bin' \
          --exclude='obj' \
          --exclude='.git' \
          --exclude='publish' \
          --exclude='dist' \
          .

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-packages/attendance-system-backend-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: attendance-system-backend-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Frontend Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-packages/attendance-system-frontend-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: attendance-system-frontend-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Complete System Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-packages/attendance-system-complete-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: attendance-system-complete-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Infrastructure Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-packages/attendance-system-infrastructure-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: attendance-system-infrastructure-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Source Code Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-packages/attendance-system-source-${{ steps.get_version.outputs.version }}.tar.gz
        asset_name: attendance-system-source-${{ steps.get_version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Documentation
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: CHANGELOG.md
        asset_name: CHANGELOG.md
        asset_content_type: text/markdown

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [build-and-test, create-release]
    if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Deploy Backend
      run: |
        cd backend/AttendanceSystem.API
        dotnet restore
        dotnet build --configuration Release
        dotnet publish --configuration Release --output ./publish
        
        echo "Backend ready for deployment to Azure App Service"
        echo "Use the publish folder contents for deployment"

    - name: Deploy Frontend
      run: |
        cd frontend
        npm ci
        npm run build
        
        echo "Frontend ready for deployment to Azure Static Web Apps"
        echo "Use the dist folder contents for deployment"

    - name: Update Release with Deployment Status
      run: |
        echo "## 🚀 Release Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Release Created**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📦 **Packages Available**:">> $GITHUB_STEP_SUMMARY
        echo "- Backend package" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend package" >> $GITHUB_STEP_SUMMARY
        echo "- Complete system package" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure package" >> $GITHUB_STEP_SUMMARY
        echo "- Source code package" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Next Steps**:">> $GITHUB_STEP_SUMMARY
        echo "1. Download the appropriate package" >> $GITHUB_STEP_SUMMARY
        echo "2. Deploy infrastructure using Terraform" >> $GITHUB_STEP_SUMMARY
        echo "3. Deploy backend to Azure App Service" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy frontend to Azure Static Web Apps" >> $GITHUB_STEP_SUMMARY
