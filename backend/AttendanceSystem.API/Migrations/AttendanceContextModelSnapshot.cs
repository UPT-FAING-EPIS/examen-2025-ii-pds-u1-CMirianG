// <auto-generated />
using System;
using AttendanceSystem.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttendanceSystem.API.Migrations
{
    [DbContext(typeof(AttendanceContext))]
    partial class AttendanceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("AttendanceSystem.API.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId", "SessionId")
                        .IsUnique();

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "PW001",
                            CreatedAt = new DateTime(2025, 9, 21, 8, 26, 37, 770, DateTimeKind.Utc).AddTicks(916),
                            Description = "Curso de desarrollo web con tecnologías modernas",
                            InstructorName = "Dr. Ana López",
                            IsActive = true,
                            Name = "Programación Web"
                        },
                        new
                        {
                            Id = 2,
                            Code = "BD001",
                            CreatedAt = new DateTime(2025, 9, 21, 8, 26, 37, 770, DateTimeKind.Utc).AddTicks(923),
                            Description = "Fundamentos de bases de datos relacionales",
                            InstructorName = "Ing. Roberto Silva",
                            IsActive = true,
                            Name = "Base de Datos"
                        });
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UniqueCode")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("StudentCode")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 21, 8, 26, 37, 770, DateTimeKind.Utc).AddTicks(822),
                            Email = "juan.perez@email.com",
                            FirstName = "Juan",
                            LastName = "Pérez",
                            StudentCode = "EST001"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 21, 8, 26, 37, 770, DateTimeKind.Utc).AddTicks(827),
                            Email = "maria.gonzalez@email.com",
                            FirstName = "María",
                            LastName = "González",
                            StudentCode = "EST002"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 21, 8, 26, 37, 770, DateTimeKind.Utc).AddTicks(828),
                            Email = "carlos.rodriguez@email.com",
                            FirstName = "Carlos",
                            LastName = "Rodríguez",
                            StudentCode = "EST003"
                        });
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Attendance", b =>
                {
                    b.HasOne("AttendanceSystem.API.Models.Session", "Session")
                        .WithMany("Attendances")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AttendanceSystem.API.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Session", b =>
                {
                    b.HasOne("AttendanceSystem.API.Models.Course", "Course")
                        .WithMany("Sessions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Course", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Session", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("AttendanceSystem.API.Models.Student", b =>
                {
                    b.Navigation("Attendances");
                });
#pragma warning restore 612, 618
        }
    }
}
