# PowerShell script para inicio r√°pido completo
# Usage: .\quick-start.ps1

Write-Host "üöÄ Attendance System - Inicio R√°pido" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green

# Verificar prerrequisitos
Write-Host ""
Write-Host "üîç Verificando prerrequisitos..." -ForegroundColor Cyan

$prerequisitesOK = $true

# Verificar .NET
try {
    $dotnetVersion = dotnet --version
    Write-Host "‚úÖ .NET: $dotnetVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå .NET 8 SDK no encontrado" -ForegroundColor Red
    $prerequisitesOK = $false
}

# Verificar Node.js
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js no encontrado" -ForegroundColor Red
    $prerequisitesOK = $false
}

# Verificar Azure CLI
try {
    $azVersion = az version --output json | ConvertFrom-Json
    Write-Host "‚úÖ Azure CLI: $($azVersion.'azure-cli')" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Azure CLI no encontrado (opcional para BD local)" -ForegroundColor Yellow
}

if (-not $prerequisitesOK) {
    Write-Host ""
    Write-Host "‚ùå Prerrequisitos faltantes. Inst√°lalos antes de continuar." -ForegroundColor Red
    Write-Host "‚Ä¢ .NET 8 SDK: https://dotnet.microsoft.com/download" -ForegroundColor White
    Write-Host "‚Ä¢ Node.js: https://nodejs.org/" -ForegroundColor White
    Write-Host "‚Ä¢ Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli" -ForegroundColor White
    exit 1
}

Write-Host ""
Write-Host "üìã Opciones de configuraci√≥n:" -ForegroundColor Cyan
Write-Host "1. Configuraci√≥n completa (Base de datos Azure SQL + Sistema local)" -ForegroundColor White
Write-Host "2. Solo sistema local (Base de datos existente)" -ForegroundColor White
Write-Host "3. Solo verificar sistema existente" -ForegroundColor White
Write-Host ""

$choice = Read-Host "Selecciona una opci√≥n (1-3)"

switch ($choice) {
    "1" {
        Write-Host ""
        Write-Host "üèóÔ∏è Configuraci√≥n completa seleccionada..." -ForegroundColor Green
        
        # Preguntar si quiere crear nueva BD
        $createDB = Read-Host "¬øCrear nueva base de datos Azure SQL? (s/n)"
        if ($createDB -eq "s" -or $createDB -eq "S" -or $createDB -eq "y" -or $createDB -eq "Y") {
            Write-Host "üóÑÔ∏è Configurando base de datos..." -ForegroundColor Yellow
            .\setup-database.ps1
            
            if ($LASTEXITCODE -ne 0) {
                Write-Host "‚ùå Error configurando base de datos" -ForegroundColor Red
                exit 1
            }
        }
        
        # Desplegar sistema
        Write-Host "üì¶ Desplegando sistema..." -ForegroundColor Yellow
        .\deploy-local.ps1
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Error desplegando sistema" -ForegroundColor Red
            exit 1
        }
        
        # Iniciar sistema
        Write-Host "üèÉ Iniciando sistema..." -ForegroundColor Yellow
        .\start-all.ps1
    }
    
    "2" {
        Write-Host ""
        Write-Host "üì¶ Solo sistema local seleccionado..." -ForegroundColor Green
        
        # Verificar configuraci√≥n de BD
        $appsettingsPath = "backend\AttendanceSystem.API\appsettings.json"
        if (-not (Test-Path $appsettingsPath)) {
            Write-Host "‚ùå appsettings.json no encontrado" -ForegroundColor Red
            exit 1
        }
        
        $config = Get-Content $appsettingsPath | ConvertFrom-Json
        if (-not $config.ConnectionStrings.DefaultConnection) {
            Write-Host "‚ö†Ô∏è Connection string no configurada. Configura la base de datos primero." -ForegroundColor Yellow
            exit 1
        }
        
        # Desplegar sistema
        Write-Host "üì¶ Desplegando sistema..." -ForegroundColor Yellow
        .\deploy-local.ps1
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Error desplegando sistema" -ForegroundColor Red
            exit 1
        }
        
        # Iniciar sistema
        Write-Host "üèÉ Iniciando sistema..." -ForegroundColor Yellow
        .\start-all.ps1
    }
    
    "3" {
        Write-Host ""
        Write-Host "üß™ Verificando sistema existente..." -ForegroundColor Green
        .\test-local-system.ps1
    }
    
    default {
        Write-Host "‚ùå Opci√≥n inv√°lida" -ForegroundColor Red
        exit 1
    }
}

Write-Host ""
Write-Host "üéâ ¬°Proceso completado!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã URLs del sistema:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "‚Ä¢ Backend API: http://localhost:5000" -ForegroundColor White
Write-Host "‚Ä¢ Swagger UI: http://localhost:5000/swagger" -ForegroundColor White
Write-Host ""
Write-Host "üìù Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Detener sistema: .\stop-all.ps1" -ForegroundColor White
Write-Host "‚Ä¢ Probar sistema: .\test-local-system.ps1" -ForegroundColor White
Write-Host "‚Ä¢ Ver logs: Get-Job | Receive-Job" -ForegroundColor White
Write-Host ""
Write-Host "üìö Documentaci√≥n:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Despliegue local: README_LOCAL_DEPLOYMENT.md" -ForegroundColor White
Write-Host "‚Ä¢ Gu√≠a completa: LOCAL_DEPLOYMENT_GUIDE.md" -ForegroundColor White
